function startProgress(element, prefix, animation = ['⠁','⠂','⠄','⡀','⢀','⠠','⠐','⠈'], interval = 500) {
  let count = 1;
  const animationLength = animation.length;
  element.textContent = `${prefix} ${animation[0]}`;
  const timer = setInterval(() => {
    element.textContent = `${prefix} ${animation[count % animationLength]}`;
    count++;
  }, interval);

  return {
    stop: (message) => {
      clearInterval(timer);
      if (message) {
        element.textContent = message;
      }
    }
  };
}

function isUrl(value) {
  try {
    return new URL(value);
  } catch {
    return false;
  }
}

function isString(value) {
  return value?.constructor === String;
}

function elementIsString(element) {
  return isString(element?.value);
}

function elementIsNonEmptyString(element) {
  return elementIsString(element) && element.value !== '';
}

function elementIsInteger(element) {
  return elementIsString(element) && /^[+-]?[0-9]+$/.test(element.value) && !Number.isNaN(Number.parseInt(element.value, 10));
}

function elementIsFloat(element) {
  return elementIsString(element) && /^[+-]?[0-9]*(\.[0-9]*)?$/.test(element.value) && !Number.isNaN(Number.parseFloat(element.value));
}

function elementIsInRange(min, max, element) {
  if (elementIsInteger(element)) {
    const value = elementGetInteger(element);
    if (value >= min && value <= max) {
      return true;
    }
  }
  return false;
}

function elementIsGTE(min, element) {
  if (elementIsInteger(element)) {
    const value = elementGetInteger(element);
    if (value >= min) {
      return true;
    }
  }
  return false;
}

function elementIsFloatGTE(min, element) {
  if (elementIsFloat(element)) {
    const value = elementGetFloat(element);
    if (value >= min) {
      return true;
    }
  }
  return false;
}

function elementIsBoolean(element) {
  return element.checked === true || element.checked === false;
}

function elementIsUrl(element) {
  return !!isUrl(element?.value);
}

function elementIsHttpUrl(element) {
  const url = isUrl(element?.value);
  return url ? (url.protocol === 'http:' || url.protocol === 'https:') : false;
}

function elementIsHttpUrlOrEmptyString(element) {
  return elementIsHttpUrl(element) || (elementIsString(element) && element.value === '');
}

function elementIsOneOf(values, element) {
  return values.some(value => value = element.value);
}

function elementHasSelection(element) {
  const selected = element.selectedOptions;
  return selected.length > 0;
}

function elementMatchesString(otherElementName, element) {
  const otherElement = document.getElementById(otherElementName);
  return elementIsString(otherElement) && elementIsString(element) && otherElement.value === element.value;
}

function elementGetString(element) {
  return element.value;
}

function elementGetInteger(element) {
  return Number.parseInt(element.value, 10);
}

function elementGetFloat(element) {
  return Number.parseFloat(element.value);
}

function elementGetBoolean(element) {
  return element.checked
}

function elementGetSelections(element) {
  const selected = element.selectedOptions;
  const result = [];
  for (let i=0; i < selected.length; ++i) {
    result.push(selected.item(i).value);
  };
  return result;
}

function appendPath(source, path) {
  return (source.endsWith('/') ? source : (source + '/')) + path;
}

function ensureStartsWith(string, startsWith) {
  return string.startsWith(startsWith) ?
    string :
    startsWith + string;
}

function resolveUrlPath(path) {
  return appendPath(ensureStartsWith(elementGetString(document.getElementById('urlBase')),'/'), path);
}
