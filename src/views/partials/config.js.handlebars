
const isConfigured = {{config.configured}};

{{> utils.js }}

function updateApplicationUrlUrls(event) {
  const applicationUrlElement = document.getElementById('applicationUrl');

  const applicationUrl = applicationUrlElement.value.endsWith('/') ? applicationUrlElement.value.slice(0,-1) : applicationUrlElement.value;
  document.getElementById('feedRssMessage').textContent = applicationUrl + '{{urls.rss}}';
  document.getElementById('feedAtomMessage').textContent = applicationUrl + '{{urls.atom}}';
  document.getElementById('feedJsonMessage').textContent = applicationUrl + '{{urls.json}}';
  document.getElementById('sonarrWebhookMessage').textContent = applicationUrl + '{{urls.sonarr}}';
}

window.onload = () => {
  if (!isConfigured) {
    document.getElementById('applicationUrl').value = document.location.href;
    updateApplicationUrlUrls();
  }

  const delayTypes = document.getElementById('feedHealthDelayTypes');
  [...delayTypes.options].forEach(option => {
    if (option.attributes.getNamedItem('data-selected')) {
      option.selected = true;
    }
  });
  document.getElementById('applicationUrl').addEventListener('blur', updateApplicationUrlUrls);

  for (const feedType of [ 'Rss', 'Atom', 'Json']) {
    document.getElementById(`feed${feedType}`).addEventListener('change', function(event) {
      if (event.target.checked) {
        document.getElementById(`feed${feedType}Message`).classList.remove('hidden');
      } else {
        document.getElementById(`feed${feedType}Message`).classList.add('hidden');
      }
    });
  }
};

function elementValid() {
  return true;
}

function validate(elementId, validationFunction, getFunction) {
  const element = document.getElementById(elementId);
  const messageElement = document.getElementById(elementId + 'Message');
  messageElement.classList.remove('error');

  if (!validationFunction(element)) {
    messageElement.classList.add('error');
    return [ false ];
  }
  return [ true, getFunction(element) ];
}

function validateConfig() {
  const [ portValid, port ] = validate('port', elementIsInRange.bind(null, 1, 65535), elementGetInteger);
  const [ addressValid, address ] = validate('address', elementIsNonEmptyString, elementGetString);
  const [ applicationUrlValid, applicationUrl ] = validate('applicationUrl', elementIsHttpUrl, elementGetString);
  const [ urlBaseValid, urlBase ] = validate('urlBase', elementIsString, elementGetString);
  const [ usernameValid, username ] = validate('username', elementIsNonEmptyString, elementGetString);
  const [ passwordValid, password ] = validate('password', isConfigured ? elementIsString : elementIsNonEmptyString, elementGetString);
  const [ confirmPasswordValid, confirmPassword ] = validate('confirmPassword', elementMatchesString.bind(null, 'password'), elementGetString);
  const [ sessionExpireValid, sessionExpire ] = validate('sessionExpire', elementIsFloatGTE.bind(null, 0), elementGetFloat);
  const [ sonarrBaseUrlValid, sonarrBaseUrl ] = validate('sonarrBaseUrl', elementIsHttpUrlOrEmptyString, elementGetString);
  const [ sonarrInsecureValid, sonarrInsecure ] = validate('sonarrInsecure', elementIsBoolean, elementGetBoolean);
  const [ sonarrApiKeyValid, sonarrApiKey ] = validate('sonarrApiKey', elementIsString, elementGetString);
  const [ feedTitleValid, feedTitle ] = validate('feedTitle', elementIsString, elementGetString);
  const [ feedThemeValid, feedTheme ] = validate('feedTheme', elementIsOneOf.bind(null, [ 'auto', 'light', 'dark' ]), elementGetString);
  const [ feedRssValid, feedRss ] = validate('feedRss', elementIsBoolean, elementGetBoolean);
  const [ feedAtomValid, feedAtom ] = validate('feedAtom', elementIsBoolean, elementGetBoolean);
  const [ feedJsonValid, feedJson ] = validate('feedJson', elementIsBoolean, elementGetBoolean);
  const [ feedHealthDelayValid, feedHealthDelay ] = validate('feedHealthDelay', elementIsGTE.bind(null, 0), elementGetInteger);
  const [ feedHealthDelayTypesValid, feedHealthDelayTypes ] = validate('feedHealthDelayTypes', feedHealthDelay > 0 ? elementHasSelection : elementValid, elementGetSelections);

  if (!portValid || !addressValid || !applicationUrlValid || !urlBaseValid ||
    !usernameValid || !passwordValid || !confirmPasswordValid || !sessionExpireValid ||
    !sonarrApiKeyValid || !sonarrApiKeyValid ||
    !feedTitleValid || !feedThemeValid ||
    !feedRssValid || !feedAtomValid || !feedJsonValid ||
    !feedHealthDelayValid || !feedHealthDelayTypesValid) {
    throw 'Invalid Configuration';
  }
  return {
    port,
    address,
    applicationUrl,
    urlBase,
    username,
    password,
    sessionExpire,
    sonarrBaseUrl,
    sonarrInsecure,
    sonarrApiKey,
    feedTitle,
    feedTheme,
    feedRss,
    feedAtom,
    feedJson,
    feedHealthDelay,
    feedHealthDelayTypes
  }
}

async function testSonarr() {
  const responseElement = document.getElementById('testSonarrResult');
  const sonarrBaseUrlElement = document.getElementById('sonarrBaseUrl');
  const sonarrInsecureElement = document.getElementById('sonarrInsecure');
  const sonarrApiKeyElement = document.getElementById('sonarrApiKey');
  const sonarrTestElement = document.getElementById('testSonarr');

  responseElement.classList.remove('error', 'good');
  sonarrTestElement.disabled = true;
  let progress;
  try {
    const url = isUrl(sonarrBaseUrlElement.value);
    if (!url) {
      throw 'Sonarr Base URL is not a URL';
    } else {
      if (url.protocol !== 'http:' && url.protocol !== 'https:') {
        throw 'Sonarr Base URL is not a http or https URL';
      }
    }
    if (sonarrApiKeyElement.value === '') {
      throw 'No API Key supplied';
    }
    progress = startProgress(sonarrTestElement, 'Testing');

    const res = await fetch(resolveUrlPath('api/testSonarrUrl'),
      {
        method: 'POST',
        headers: {
          'content-type': 'application/json'
        },
        body: JSON.stringify({
          sonarrBaseUrl: sonarrBaseUrlElement.value,
          sonarrInsecure: sonarrInsecureElement.checked,
          sonarrApiKey: sonarrApiKeyElement.value
        })
      }
    );
    if (res.ok) {
      const json = await res.json();
      if (json.result === 'OK') {
        responseElement.textContent = `Connected to ${json.instanceName}`;
        responseElement.classList.remove('error');
        responseElement.classList.add('good');
        setTimeout(() => {
          responseElement.classList.remove('good');
        }, 3000)
      } else {
        throw `Failed: ${json.message}`;
      }
    } else {
      throw `Sonarr API test returned unexpected response: ${res.status} ${res.statusText}`;
    }
  } catch(e) {
    responseElement.textContent = isString(e) ? e : 'Error testing Sonarr API.';
    responseElement.classList.add('error');
    responseElement.classList.remove('good');
  } finally {
    sonarrTestElement.disabled = false;
    progress.stop('Test');
  }
}

async function reloadAndRedirect(message, applicationUrl, redirectUrl, expectedPingId) {
  const overlay = document.getElementById('overlay');
  const overlayMessage = document.getElementById('overlayMessage');
  overlay.classList.remove('hidden');
  overlay.classList.add('overlay');

  startProgress(overlayMessage, message);
  const pingUrl = appendPath(applicationUrl, 'api/ping');
  let wait = 312.5;
  async function ping() {
    try {
      const res = await fetch(pingUrl);
      if (res.ok) {
        const pingId = res.headers.get('x-ping-id');
        if (pingId === expectedPingId) {
          window.location = redirectUrl;
        }
      }
    } catch {
    }
    if (wait < 5000) {
      wait *= 2;
    }
    setTimeout(ping, wait);
  }
  setTimeout(ping, wait);
}

async function saveConfig() {
  const saveConfigElement = document.getElementById('saveConfig');

  saveConfigElement.disabled = true;
  let progress;

  try {
    progress = startProgress(saveConfigElement, 'Saving');
    const config = validateConfig();

    const res = await fetch(resolveUrlPath('api/saveConfig'),
      {
        method: 'POST',
        headers: {
          'content-type': 'application/json'
        },
        body: JSON.stringify(config)
      }
    );

    progress.stop();

    if (res.ok) {
      const json = await res.json();
      if (json.result === 'OK') {
        saveConfigElement.textContent = 'Saved';
        setTimeout(() => {
          saveConfigElement.textContent = isConfigured ? 'Save' : 'Continue';
        }, 3000);
        if (json.reload) {
          if (!isConfigured) {
            reloadAndRedirect(`Reconfiguring, waiting for ${config.applicationUrl} to be ready`, config.applicationUrl, config.applicationUrl, json.pingId);
          } else {
            reloadAndRedirect(`Reconfiguring, waiting for ${config.applicationUrl} to be ready`, config.applicationUrl, appendPath(config.applicationUrl, 'config'), json.pingId);
          }
        }
      } else {
        throw `Failed: ${json.message}`;
      }
    } else {
      throw `Save Failed`;
    }
  } catch(e) {
    progress.stop(isString(e) ? e : 'Error saving configuration');
    setTimeout(() => {
      saveConfigElement.textContent = isConfigured ? 'Save' : 'Continue';
    }, 3000);
  } finally {
    saveConfigElement.disabled = false;
  }
}

function feedHealthDelayChanged() {
  const [ feedHealthDelayValid, feedHealthDelay ] = validate('feedHealthDelay', elementIsGTE.bind(null, 0), elementGetInteger);
  if (feedHealthDelayValid) {
    const messageElement = document.getElementById('feedHealthDelayTypesWrapper');
    if (feedHealthDelay > 0) {
      messageElement.classList.remove('collapse');
    } else {
      messageElement.classList.add('collapse');
    }
  }
}
